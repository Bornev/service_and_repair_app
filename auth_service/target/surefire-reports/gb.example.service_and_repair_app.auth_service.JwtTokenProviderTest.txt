-------------------------------------------------------------------------------
Test set: gb.example.service_and_repair_app.auth_service.JwtTokenProviderTest
-------------------------------------------------------------------------------
Tests run: 4, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 5.782 s <<< FAILURE! -- in gb.example.service_and_repair_app.auth_service.JwtTokenProviderTest
gb.example.service_and_repair_app.auth_service.JwtTokenProviderTest.testExpiredToken -- Time elapsed: 0.147 s <<< ERROR!
io.jsonwebtoken.security.WeakKeyException: The specified key byte array is 200 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
	at io.jsonwebtoken.security.Keys.hmacShaKeyFor(Keys.java:83)
	at gb.example.service_and_repair_app.auth_service.JwtTokenProviderTest.testExpiredToken(JwtTokenProviderTest.java:58)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

gb.example.service_and_repair_app.auth_service.JwtTokenProviderTest.testGetUsernameFromToken -- Time elapsed: 0.008 s <<< ERROR!
io.jsonwebtoken.security.WeakKeyException: The specified key byte array is 200 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
	at io.jsonwebtoken.security.Keys.hmacShaKeyFor(Keys.java:83)
	at gb.example.service_and_repair_app.auth_service.utils.JwtTokenProvider.generateToken(JwtTokenProvider.java:28)
	at gb.example.service_and_repair_app.auth_service.JwtTokenProviderTest.testGetUsernameFromToken(JwtTokenProviderTest.java:40)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

gb.example.service_and_repair_app.auth_service.JwtTokenProviderTest.testGenerateAndValidateToken -- Time elapsed: 0.008 s <<< ERROR!
io.jsonwebtoken.security.WeakKeyException: The specified key byte array is 200 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
	at io.jsonwebtoken.security.Keys.hmacShaKeyFor(Keys.java:83)
	at gb.example.service_and_repair_app.auth_service.utils.JwtTokenProvider.generateToken(JwtTokenProvider.java:28)
	at gb.example.service_and_repair_app.auth_service.JwtTokenProviderTest.testGenerateAndValidateToken(JwtTokenProviderTest.java:34)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

